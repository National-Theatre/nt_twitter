<?php
/**
 * @file
 * @copyright The Royal National Theatre
 * @author John-Paul Drawneek
 */

/**
 * Implements hook_node_info().
 */
function nt_twitter_node_info() {
  return array(
    'nt_twitter' => array(
      'name' => t('NT Twitter'),
      'base' => 'nt_twitter',
      'description' => t('Create a block for holding tweets to which look good.'),
      'locked' => TRUE,
      'has_title' => TRUE,
    ),
  );
}
/**
 * Implements hook_menu().
 */
function nt_twitter_menu() {
  return array(
    'admin/config/system/twitter-config' => array(
      'title' => 'NT twitter Config',
      'description' => 'Configure this site connection to the main NT CMS',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('nt_twitter_admin_config'),
      'access arguments' => array('Config twitter Connection'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'nt_twitter.form.inc',
    ),
    'admin/config/system/twitter-config/access-token' => array(
      'title' => 'Twitter Access callback',
      'description' => 'Configure this site connection to the main NT CMS',
      'page callback' => 'nt_twitter_access_callback',
      'page arguments' => array(),
      'access arguments' => array('Config twitter Connection'),
      'type' => MENU_CALLBACK,
      'file' => 'nt_twitter.form.inc',
    ),
    'ahah/twitter-oauth-data' => array(
      'title' => 'Sign Twitter request',
      'page callback' => 'nt_twitter_get_oauth_data',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'nt_twitter.form.inc',
    ),
  );
}
/**
 * Implements hook_permission().
 */
function nt_twitter_permission() {
  return array(
    'Config twitter Connection' => array(
      'title' => t('NT Twitter connection config'),
      'description' => t('Configure Twitter connection settings.'),
    ),
  );
}
/**
 * Implements hook_theme().
 */
function nt_twitter_theme($existing, $type, $theme, $path) {
  return array(
    'nt_twitter_table' => array(
      'render element' => 'element',
      'path' => $path . '/templates',
      'file' => 'theme.inc',
    ),
    'nt_twitter_block_latest' => array(
      'variables' => array('node' => NULL),
      'template'  => 'templates/nt-twitter-block-latest',
      'preprocess functions' => array('nt_twitter_block_preprocess'),
    ),
    'nt_twitter_block_tweet' => array(
      'variables' => array('node' => NULL),
      'template'  => 'templates/nt-twitter-block-tweet',
      'preprocess functions' => array('nt_twitter_block_preprocess'),
    ),
  );
}
/**
 * Preproccess for twitter block template.
 *
 * @param array $variables
 *   Data being passed into the theme to be rendered.
 * @param string $hook
 *   Hook trigering this preprocess callback.
 */
function nt_twitter_block_preprocess(&$variables, $hook) {
  $variables['classes_array'] = array();
  $variables['attributes_array'] = array();
  $variables['title_attributes_array'] = array();
  $variables['content_attributes_array'] = array();
  $variables['channel'] = $variables['hash'] = $variables['tweet_id'] = '';
  $variables['tweet'] = '';
  if (!empty($variables['node']->nt_twitter_chnl)) {
    $variables['channel']
      = $variables['node']->nt_twitter_chnl[LANGUAGE_NONE][0]['value'];
  }
  if (!empty($variables['node']->nt_twitter_hash)) {
    $variables['hash']
      = $variables['node']->nt_twitter_hash[LANGUAGE_NONE][0]['value'];
  }
  if (isset($variables['node']->tweet_list)) {
    $variables['tweet_id']
      = isset($variables['node']->tweet_list['select_tweet'])? $variables['node']->tweet_list['select_tweet'] : '';
    $variables['tweet']
      = isset($variables['node']->tweet_list['tweet'])? $variables['node']->tweet_list['tweet'] : '';
    preg_match_all("#http://[a-zA-Z0-9\./]+#", $variables['tweet'], $matches);
    foreach ($matches as $match) {
      foreach ($match as $item) {
        $variables['tweet'] = str_replace(
          $match[0],
          '<a href="' . $item . '">' . $item . '</a>', $variables['tweet']
        );
      }
    }
  }
  drupal_add_js(
    array('nt_twitter' => array('path' => url('', array('absolute' => TRUE)))),
    'setting'
  );
}
/**
 * Implements hook_form().
 */
function nt_twitter_form($node, $form_state) {
  $form = node_content_form($node, $form_state);
  $radio_default = NULL;
  if (!isset($form_state['nt_twitter'])) {
    if (isset($form_state['node'])
      && isset($form_state['node']->nt_twitter_type)
      && $form_state['node']->nt_twitter_type[LANGUAGE_NONE][0]['value'] == 'picked') {
      $form_state['values']['nt_twitter_chnl']
        = $form_state['node']->nt_twitter_chnl;
      $form_state['values']['nt_twitter_hash']
        = $form_state['node']->nt_twitter_hash;
      $radio_default = $form_state['node']->tweet_list['select_tweet'];
      _nt_twitter_populate_tweets($form, $form_state);
    }
    else {
      $form_state['nt_twitter'] = array();
    }
  }
  if (!isset($form_state['nt_twitter']['ordering'])) {
    $radios = array();
  }
  else {
    $radios = array_combine(
      $form_state['nt_twitter']['ordering'],
      $form_state['nt_twitter']['ordering']
    );
  }

  $form['tweet_list'] = array(
    '#theme' => 'nt_twitter_table',
    '#type'  => 'fieldset',
    '#title' => t('List of tweets'),
    '#tree'  => TRUE,
    '#data'  => $form_state['nt_twitter'],
    'select_tweet' => array(
      '#type' => 'radios',
      '#options' => $radios,
      '#default_value' => $radio_default,
    ),
  );
  $form['tweet_list']['get_list_tweets'] = array(
    '#type' => 'submit',
    '#value' => 'Get List of tweets',
    '#submit' => array('nt_twitter_list_tweets_submit'),
    '#validate' => array('nt_twitter_list_tweets_validate'),
    '#limit_validation_errors' => array(
      array('nt_twitter_hash'),
      array('nt_twitter_chnl'),
    ),
  );
  $form['#attached']['js'][]
    = drupal_get_path('module', 'nt_twitter') . '/js/jquery.tablesorter.min.js';
  $form['#attached']['js'][]
    = drupal_get_path('module', 'nt_twitter') . '/js/form.js';
  $form['#attached']['css'][]
    = drupal_get_path('module', 'nt_twitter') . '/css/style.css';
  $form['#submit'] = array('nt_twitter_pack_save_submit');
  $form['#validate'][] = 'nt_twitter_picked_tweets_validate';
  return $form;
}
/**
 * List tweets validate.
 *
 * @param array $form
 *   The form being added or edited.
 * @param array $form_state
 *   The form state array.
 *
 * @return array
 *   An array containing the title and any custom form elements to be displayed
 *   in the node editing form.
 */
function nt_twitter_list_tweets_validate($form, &$form_state) {

  $channel = $form_state['values']['nt_twitter_chnl'][LANGUAGE_NONE][0]['value'];
  $hashtag = $form_state['values']['nt_twitter_hash'][LANGUAGE_NONE][0]['value'];
  if (empty($channel) && empty($hashtag)) {
    form_error($form['nt_twitter_chnl'], t('You must select either a channel or hashtag.'));
    form_error($form['nt_twitter_hash'], 'See above');
  }
}
/**
 * Picked tweets validate.
 *
 * @param array $form
 *   The form being added or edited.
 * @param array $form_state
 *   The form state array.
 *
 * @return array
 *   An array containing the title and any custom form elements to be displayed
 *   in the node editing form.
 */
function nt_twitter_picked_tweets_validate($form, &$form_state) {

  $channel = $form_state['values']['nt_twitter_chnl'][LANGUAGE_NONE][0]['value'];
  $hashtag = $form_state['values']['nt_twitter_hash'][LANGUAGE_NONE][0]['value'];
  if (empty($channel) && empty($hashtag)) {
    form_error($form['nt_twitter_chnl'], t('You must select either a channel or hashtag.'));
    form_error($form['nt_twitter_hash'], 'See above');
  }
  if ($form_state['values']['nt_twitter_type'][LANGUAGE_NONE][0]['value'] == 'picked'
    && empty($form_state['values']['tweet_list']['select_tweet'])) {
    form_error($form['tweet_list'], t('You must select a tweet.'));
  }
}
/**
 * List tweets submit.
 *
 * @param array $form
 *   The node being added or edited.
 * @param array $form_state
 *   The form state array.
 *
 * @return array
 *   An array containing the title and any custom form elements to be displayed
 *   in the node editing form.
 */
function nt_twitter_list_tweets_submit($form, &$form_state) {
  _nt_twitter_populate_tweets($form, $form_state);

  $form_state['rebuild'] = TRUE;
}
/**
 * Helper function to get list of tweets.
 * @access private
 *
 * @param array $form
 *   The node being added or edited.
 * @param array $form_state
 *   The form state array.
 */
function _nt_twitter_populate_tweets($form, &$form_state) {
  $query = '';
  if (!empty($form_state['values']['nt_twitter_chnl'][LANGUAGE_NONE][0]['value'])) {
    $query .= 'from:' .
      $form_state['values']['nt_twitter_chnl'][LANGUAGE_NONE][0]['value'] . ' ';
  }
  if (!empty($form_state['values']['nt_twitter_hash'][LANGUAGE_NONE][0]['value'])) {
    $query .= '#' .
      $form_state['values']['nt_twitter_hash'][LANGUAGE_NONE][0]['value'] . ' ';
  }
  $query = trim($query);
  $url = 'http://search.twitter.com/search.json?q=' . urlencode($query);
  $options = array(
    'method' => 'GET',
  );
  $result = drupal_http_request($url, $options);
  if ($result->code == 200) {
    $data_decoded = json_decode($result->data);
    $output = array();
    $ordering = array();
    foreach ($data_decoded->results as $item) {
      $output[$item->id] = array(
        'user' => $item->from_user,
        'user_id' => $item->from_user_id,
        'tweet' => $item->text,
        'date' => $item->created_at,
      );
      $ordering[] = $item->id;
    }
    $form_state['nt_twitter']['data'] = $output;
    $form_state['nt_twitter']['ordering'] = $ordering;
  }
  else {
    if (isset($result->data)) {
      $error = json_decode($result->data)->error;
    }
    else {
      $error = $result->error;
    }
    drupal_set_message(
      t(
        'Twitter lookup failed with code: :code, :message',
        array(':code' => $result->code, ':message' => $error)
      ),
      'error'
    );
    $form_state['nt_twitter'] = array();
  }
}
/**
 * This is to pack the override image data into its correct row.
 *
 * @param array $form
 *   The node being added or edited.
 * @param array $form_state
 *   The form state array.
 */
function nt_twitter_pack_save_submit($form, &$form_state) {
  if ($form_state['values']['nt_twitter_type'][LANGUAGE_NONE][0]['value']
    == 'picked') {
    $form_state['values']['tweet_list']['tweet']
      = $form_state['nt_twitter']['data'][$form_state['values']['tweet_list']['select_tweet']]['tweet'];
  }
}
/**
 * Implements hook_insert().
 */
function nt_twitter_insert($node) {
  if ($node->nt_twitter_type[LANGUAGE_NONE][0]['value'] == 'picked') {
    db_insert('nt_twitter_picked')->fields(array(
      'nid' => $node->nid,
      'vid' => $node->vid,
      'tweet_id' => $node->tweet_list['select_tweet'],
      'tweet' => $node->tweet_list['tweet'],
      'created' => time(),
      'changed' => time(),
    ))->execute();
  }
}
/**
 * Implements hook_load().
 */
function nt_twitter_load($nodes) {
  foreach ($nodes as $nid => &$node) {
    $result = db_query(
      "SELECT tweet_id, tweet FROM {nt_twitter_picked} WHERE nid = :nid AND vid = :vid",
      array(':nid' => $nid, ':vid' => $node->vid)
    );
    $row = $result->fetch();
    if ($row) {
      $node->tweet_list['select_tweet'] = $row->tweet_id;
      $node->tweet_list['tweet']        = $row->tweet;
    }
    else {
      $node->tweet_list = array();
    }
  }
}
/**
 * Implements hook_update().
 */
function nt_twitter_update($node) {
  if ($node->vid == $node->original->vid) {
    if ($node->nt_twitter_type[LANGUAGE_NONE][0]['value'] == 'picked') {
      db_update('nt_twitter_picked')->fields(array(
        'tweet_id' => $node->tweet_list['select_tweet'],
        'tweet' => $node->tweet_list['tweet'],
        'changed' => time(),
      ))
        ->condition('nid', $node->nid)
        ->condition('vid', $node->vid)
        ->execute();
    }
    else {
      db_delete('nt_twitter_picked')
      ->condition('nid', $node->nid)
      ->condition('vid', $node->vid)
      ->execute();
    }
  }
  else {
    if ($node->nt_twitter_type[LANGUAGE_NONE][0]['value'] == 'picked') {
      db_insert('nt_twitter_picked')->fields(array(
        'nid'      => $node->nid,
        'vid'      => $node->vid,
        'tweet_id' => $node->tweet_list['select_tweet'],
        'tweet'    => $node->tweet_list['tweet'],
        'created'  => time(),
        'changed'  => time(),
      ))->execute();
    }
  }
}
/**
 * Implements hook_delete().
 *
 * This hook is invoked only on the module that defines the node's content type
 * (use hook_node_delete() to respond to all node deletions).
 *
 * This hook is invoked from node_delete_multiple() after the node has been
 * removed from the node table in the database, before hook_node_delete() is
 * invoked, and before field_attach_delete() is called.
 *
 * @param stdClass $node
 *   The node that is being deleted.
 */
function nt_twitter_delete($node) {
  db_delete('nt_twitter_picked')
      ->condition('nid', $node->nid)
      ->execute();
}
/**
 * Implements hook_node_revision_delete().
 *
 * Remove revision data from twitter picked table.
 *
 * @param stdClass $node
 *   The node revision (node object) that is being deleted.
 */
function nt_twitter_revision_delete($node) {
  db_delete('nt_twitter_picked')
      ->condition('nid', $node->nid)
      ->condition('vid', $node->vid)
      ->execute();
}

function nt_twitter_block_info() {
  $result = db_query(
    'SELECT * FROM {node} WHERE type = :type AND status = 1',
    array(':type' => 'nt_twitter')
  );
  $output = array();
  foreach ($result as $tweet) {
    $output[$tweet->nid] = array(
      'info'       => '(Tweet) ' . $tweet->title,
      'cache'      => DRUPAL_CACHE_PER_PAGE,
    );
  }
  return $output;
}

function nt_twitter_block_view($delta = '') {
  $node = node_load($delta);
  if ($node->nt_twitter_type[LANGUAGE_NONE][0]['value'] == 'latest') {
    $theme = 'nt_twitter_block_latest';
    drupal_add_js(drupal_get_path('module', 'nt_twitter') . '/js/twitter.js');
  }
  else {
    $theme = 'nt_twitter_block_tweet';
  }
  drupal_add_js(
    array('nt_twitter' => array('path' => url('', array('absolute' => TRUE)))),
    'setting'
  );
  return array(
    'subject' => NULL,
    'content' => array(
      '#theme' => $theme,
      '#node'  => $node,
    ),
  );
}
/**
 * Callback to get the auth token.
 *
 * @param array $form
 *   Current from structure.
 * @param array $form_state
 *   Current form structure state.
 *
 * @return array
 *   Form structure to be rendered.
 */
function nt_twitter_config_get_token($form, &$form_state) {
  $key = variable_get('nt_twitter_oauth_key', '');
  $secret = variable_get('nt_twitter_oauth_secret', '');
  $consumer = new \DrupalOAuthConsumer($key, $secret);
  $client = new \DrupalOAuthClient($consumer);
  $endpoint = 'https://api.twitter.com/oauth/request_token';
  $r_token = $client->getRequestToken(
    $endpoint,
    array(
      'callback' => url(
        'admin/config/system/twitter-config/access-token',
        array('absolute' => TRUE)
      ),
    )
  );
  variable_set('nt_twitter_rtoken', serialize($r_token));
  $options = array(
    'query' => array(
      'oauth_token'    => $r_token->key,
      'oauth_version'  => 1.0,
    ),
  );
  $redirect = 'https://api.twitter.com/oauth/authorize';
  drupal_goto($redirect, $options);
}
/**
 * Implements hook_nt_feed_register_settings_form_alter().
 */
function nt_twitter_nt_feed_register_settings_form_alter(&$form, &$form_state) {
  if (!(isset($form_state['item']->config['NtFeedTwitter']))) {
    $form_state['item']->config['NtFeedTwitter'] = array(
      array(
        'screen_name' => 'ntlive',
        'filter'      => ''
      ),
    );
  }
  $form['NtFeedTwitter'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Twitter'),
    '#collapsible' => TRUE,
    '#tree'        => TRUE,
  );
  foreach ($form_state['item']->config['NtFeedTwitter'] as $config) {
    $config += array(
      'screen_name' => '',
      'filter'      => '',
    );
    $form['NtFeedTwitter'][] = array(
      'screen_name'  => array(
        '#type'          => 'textfield',
        '#title'         => t('Screen Name'),
        '#default_value' => $config['screen_name'],
      ),
      'filter'  => array(
        '#type'          => 'textfield',
        '#title'         => t('Hash tag'),
        '#default_value' => $config['filter'],
      ),
    );
  }
  $form['NtFeedTwitter']['add'] = array(
    '#name' => 'NtFeedTwitterAdd',
    '#type' => 'submit',
    '#value' => t('More'),
    '#weight' => count($form['NtFeedTwitter']),
    '#submit' => array('nt_twitter_add_submit'),
    '#limit_validation_errors' => array(),
  );
}
/**
 * Add new twitter channel.
 *
 * @param array $form
 *   The node being added or edited.
 * @param array $form_state
 *   The form state array.
 */
function nt_twitter_add_submit(&$form, &$form_state) {
  $form_state['item']->config['NtFeedTwitter'][] = array(
    'screen_name' => 'ntlive',
    'filter'      => '',
  );
  $form_state['rebuild'] = TRUE;
}
/**
 * Implements hook_nt_feed_register_settings_defaults_alter().
 */
function nt_twitter_nt_feed_register_settings_defaults_alter(&$settings) {
  $settings['NtFeedTwitter'] = array();
  $settings['NtFeedTwitter'][0] = array(
    'screen_name' => 'ntlive',
    'filter'      => ''
  );
}
/**
 * Sign the Url for auth query of twitter.
 * @access private
 *
 * @param string $url
 *   Url to get twitter data from.
 *
 * @return string
 *   Url to get twitter data with OAuth signiture.
 */
function _nt_twitter_wrap_oauth($url) {
  $key      = variable_get('nt_twitter_oauth_key', '');
  $secret   = variable_get('nt_twitter_oauth_secret', '');
  $consumer = new DrupalOAuthConsumer($key, $secret, array());
  $token    = unserialize(variable_get('nt_twitter_oauth_token'));
  $result   = DrupalOAuthRequest::from_consumer_and_token($consumer, $token, 'GET', $url);
  $result->sign_request(new \OAuthSignatureMethod_HMAC_SHA1(), $consumer, $token);
  return $result->to_url();
}
